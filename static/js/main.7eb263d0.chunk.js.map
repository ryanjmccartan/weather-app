{"version":3,"sources":["components/Forecast.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Forecast","id","this","props","forecast","map","key","date","className","moment","format","src","day","condition","icon","alt","maxtemp_f","mintemp_f","Component","Weather","state","input","weather","location","name","region","current","temp_f","feelslike_f","gust_mph","condition_current","condition_icon","day_array","getCurrentWeather","e","city","axios","get","then","response","console","log","data","setState","catch","error","getWeatherForecast","alert","astro_array","forEach","handleChange","target","value","precip","totalprecip_in","TextField","margin","label","type","placeholder","onChange","Button","color","variant","onClick","length","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7eb263d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport moment from 'moment';\nimport './Forecast.css';\n// import 'materialize-css/dist/css/materialize.min.css';\n\n\nclass Forecast extends Component {\n    render() {\n// This component renders the forecast\n        return(\n            <div id='forecast-container'>\n                {this.props.forecast.map(forecast => {\n                    return <div key={forecast.date}>\n                        <div className=\"weather-forecast\">\n                            {moment(forecast.date).format('ddd')}\n                            <br/>\n                            {moment(forecast.date).format('MM/DD')}\n                            <img src={forecast.day.condition.icon} alt=\"weather icon\"/>\n                        <br/>\n                        <div className=\"temp\">\n                            High: \n                            <br/>\n                            {forecast.day.maxtemp_f}\n                            <br/>\n                            Low:\n                            <br/>\n                            {forecast.day.mintemp_f}\n                            </div>\n                        </div>\n                    </div>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Forecast;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Forecast from './Forecast';\nimport { TextField, Button } from '@material-ui/core';\nimport './Weather.css';\n\nclass Weather extends Component {\n\n    state = {\n        input: '',\n        weather: {\n            location: {\n                name: '',\n                region: ''\n            },\n            current: {\n                temp_f: 0,\n                feelslike_f: 0,\n                gust_mph: 0\n            },\n            condition_current: {\n                condition_icon: ''\n            }\n        },\n        forecast: {\n            day_array: [],\n        }\n    }\n\n    // getCurrentWeather function receives current-day forecast from API\n    getCurrentWeather = (e) => {\n        const city = this.state.input;\n        axios.get(`/weather/current/${city}`).then(response => {\n            console.log('getting current weather', response.data);\n            this.setState({\n                input: '',\n                weather: {\n                    location: {\n                        name: response.data.location.name,\n                        region: response.data.location.region\n                    },\n                    current: {\n                        temp_f: response.data.current.temp_f,\n                        feelslike_f: response.data.current.feelslike_f,\n                        gust_mph: response.data.current.gust_mph\n                    },\n                    condition_current: {\n                        condition_icon: response.data.current.condition.icon\n                    }\n                }\n            });\n            // console.log('in current weather location', this.state.weather.location)\n        }).catch(error => {\n            console.log('error getting current weather', error);\n        });\n    }\n\n    // getWeatherForecast function receives three-day forecast from API\n    getWeatherForecast = () => {\n        if(this.state.input === '') {\n            alert('Please enter the name of a city');\n        }\n        else{\n        const city = this.state.input;\n        axios.get(`/weather/forecast/${city}`).then(response => {\n            console.log('getting weather forecast', response.data);\n            this.setState({\n                forecast: {\n                    day_array: [],\n                    astro_array: []\n                }\n            });\n            response.data.forEach(forecast => {\n                this.setState({\n                    forecast: {\n                        day_array: [...this.state.forecast.day_array, forecast],\n                    }\n                })\n            });\n            this.getCurrentWeather();\n            console.log('in forecast state day', this.state.forecast.day_array)\n        }).catch(error => {\n            console.log('error getting weather forecast', error);\n        });\n      }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value \n        })\n    }\n\n    render() {\n        // Precip variable is used to calculate the precipitation over three-day forecast\n        let precip = 0;\n\n        this.state.forecast.day_array.map(forecast => {\n            precip += forecast.day.totalprecip_in;\n            // console.log('after adding precip', precip);\n            return precip; \n        });\n\n        return(\n            <div>\n                <div className=\"location-input\">\n                    <TextField \n                    margin=\"dense\"\n                    label=\"Enter location\"\n                    type=\"text\"\n                    value={this.state.input} \n                    placeholder='city name or zip code' \n                    onChange={(e) => this.handleChange(e)}\n                    />\n                    <Button id=\"srch-btn\" color=\"default\" variant=\"contained\" onClick={this.getWeatherForecast}>Search</Button>\n                </div>\n                {this.state.forecast.day_array.length !== 0 ?\n                <div className=\"showing-weather\">\n                    <div className=\"current-weather-container\">\n                        <h3>{this.state.weather.location.name}, {this.state.weather.location.region}</h3>\n                        <img src={this.state.weather.condition_current.condition_icon} alt=\"weather icon\"/>\n                        <p>Current Temperature:\n                            <br/>\n                            {this.state.weather.current.temp_f}</p>\n                            Feels like: {this.state.weather.current.feelslike_f}\n                    </div>\n                    {/* <h3>Forecast:</h3>\n                    Expected precipitation (in inches):\n                    <br/>\n                    {precip} */}\n                    <Forecast forecast={this.state.forecast.day_array}/>\n                    <br/>\n                    <br/>\n                    <br/>\n                </div> \n                :\n                <div>\n                    <br/>\n                    <br/>\n                    <h3>Enter a city to check the weather!</h3>\n                    <br/>\n                    <br/>\n                </div>\n                }\n                {/* Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a> */}\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, {Component} from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n  render() {\n    return(\n      <div className=\"App\">\n        <Weather/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}