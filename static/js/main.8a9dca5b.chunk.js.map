{"version":3,"sources":["components/Forecast.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Forecast","this","props","forecast","map","day","key","maxtemp_f","src","condition","icon","alt","mintemp_f","Component","Weather","state","weather","location","current","temp_f","feelslike_f","gust_mph","condition_current","condition_icon","day_array","astro_array","getCurrentWeather","e","city","axios","get","then","response","console","log","data","setState","name","catch","error","getWeatherForecast","alert","forEach","astro","handleChange","target","value","precip","totalprecip_in","className","placeholder","onChange","onClick","length","href","title","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8a9dca5b.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass Forecast extends Component {\n    render() {\n// This component renders the three-day forecast\n        return(\n            <div>\n                {this.props.forecast.map(day => {\n                    return <p key={day.maxtemp_f}>\n                        <img src={day.condition.icon} alt=\"weather-icon\"/>\n                        <br/>\n                        Max temp: \n                        <br/>\n                        {day.maxtemp_f}\n                        <br/>\n                        Min temp:\n                        <br/>\n                        {day.mintemp_f}\n                    </p>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Forecast;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Forecast from './Forecast';\n\nclass Weather extends Component {\n\n    state = {\n        weather: {\n            location: '',\n            current: {\n                temp_f: 0,\n                feelslike_f: 0,\n                gust_mph: 0\n            },\n            condition_current: {\n                condition_icon: ''\n            }\n        },\n        forecast: {\n            day_array: [],\n            astro_array: []\n        }\n    }\n\n    // getCurrentWeather function receives current-day forecast from API\n    getCurrentWeather = (e) => {\n        const city = this.state.weather.location;\n        axios.get(`/weather/current/${city}`).then(response => {\n            console.log('getting current weather', response.data);\n            this.setState({\n                weather: {\n                    location: response.data.location.name,\n                    current: {\n                        temp_f: response.data.current.temp_f,\n                        feelslike_f: response.data.current.feelslike_f,\n                        gust_mph: response.data.current.gust_mph\n                    },\n                    condition_current: {\n                        condition_icon: response.data.current.condition.icon\n                    }\n                }\n            });\n        }).catch(error => {\n            console.log('error getting current weather', error);\n        });\n    }\n\n    // getWeatherForecast function receives three-day forecast from API\n    getWeatherForecast = () => {\n        if(this.state.weather.location === '') {\n            alert('Please enter the name of a city');\n        }\n        else{\n        const city = this.state.weather.location;\n        axios.get(`/weather/forecast/${city}`).then(response => {\n            console.log('getting weather forecast', response.data);\n            this.setState({\n                forecast: {\n                    day_array: [],\n                    astro_array: []\n                }\n            });\n            response.data.forEach(forecast => {\n                this.setState({\n                    forecast: {\n                        day_array: [...this.state.forecast.day_array, forecast.day],\n                        astro_array: [...this.state.forecast.astro_array, forecast.astro]\n                    }\n                })\n            });\n            this.getCurrentWeather();\n            console.log('in forecast state day', this.state.forecast.day_array)\n            console.log('in forecast state astro', this.state.forecast.astro_array)\n        }).catch(error => {\n            console.log('error getting weather forecast', error);\n        });\n      }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            weather: {\n            ...this.state.weather, \n            location: e.target.value\n            }\n        })\n    }\n\n    render() {\n        // Precip variable is used to calculate the precipitation over three-day forecast\n        let precip = 0;\n\n        this.state.forecast.day_array.map(day => {\n            precip += day.totalprecip_in;\n            console.log('after adding precip', precip);\n            return precip; \n        });\n\n        return(\n            <div className=\"weather-forecast\">\n                <input placeholder='enter city name' onChange={(e) => this.handleChange(e)}/>\n                <button onClick={this.getWeatherForecast}>Check weather</button>\n                {this.state.forecast.day_array.length !== 0 ?\n                <div className=\"show-weather\">\n                    <h3>Today's Weather:</h3>\n                    <img src={this.state.weather.condition_current.condition_icon} alt=\"weather_icon\"/>\n                    <p>Current Temperature:\n                        <br/>\n                        {this.state.weather.current.temp_f}</p>\n                        <br/>\n                        Feels like: {this.state.weather.current.feelslike_f}\n                    <br/>\n                    <h3>3-Day Forecast:</h3>\n                    Expected precipitation (in inches):\n                    <br/>\n                    {precip}\n                    <Forecast forecast={this.state.forecast.day_array}/>\n                    <br/>\n                    <br/>\n                    <br/>\n                </div> \n                :\n                <div>\n                    <br/>\n                    <br/>\n                    Enter a city to check the weather!\n                    <br/>\n                    <br/>\n                </div>\n                }\n                Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a>\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, {Component} from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n  render() {\n    return(\n      <div className=\"App\">\n        <Weather/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}